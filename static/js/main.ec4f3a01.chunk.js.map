{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","onClick2","value2","Board","i","this","arr","renderSquare","React","Component","Game","state","history","arrFromGame","Array","fill","isNext","mi","carr","length","slice","setState","concat","status","current","winner","sq","lines","a","b","c","calculateWinner","handleClick","ReactDOM","render","document","getElementById"],"mappings":"uOAKA,SAASA,EAAOC,GACZ,OACI,4BAAQC,UAAU,SAASC,QAAUF,EAAMG,UACrCH,EAAMI,Q,IAKdC,E,2KAEWC,GAAI,IAAD,OACZ,OACI,kBAACP,EAAD,CACIK,OAAUG,KAAKP,MAAMQ,IAAIF,GACzBH,SAAa,kBAAM,EAAKH,MAAMG,SAASG,Q,+BAM/C,OACI,6BACI,yBAAKL,UAAU,aACdM,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,IAEnB,yBAAKR,UAAU,aACdM,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,IAEnB,yBAAKR,UAAU,aACdM,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,S,GA3BfC,IAAMC,WAkCpBC,E,kDAEF,WAAYZ,GAAQ,IAAD,8BACf,cAAMA,IACDa,MAAQ,CACTC,QAAS,CAAC,CACNC,YAAaC,MAAM,GAAGC,KAAK,QAE/BC,QAAQ,GANG,E,wDAWPC,GAER,IAAML,EAAUP,KAAKM,MAAMC,QAErBM,EADUN,EAAQA,EAAQO,OAAS,GACpBN,YAAYO,QAEjCF,EAAKD,GAAMZ,KAAKM,MAAMK,OAAS,IAAM,IAErCX,KAAKgB,SAAS,CACVT,QAASA,EAAQU,OAAO,CAAC,CACrBT,YAAaK,KAEjBF,QAASX,KAAKM,MAAMK,W,+BAKlB,IAMFO,EANC,OAECX,EAAUP,KAAKM,MAAMC,QACrBY,EAAUnB,KAAKM,MAAMC,QAAQA,EAAQO,OAAS,GAC9CM,EAoCd,SAAyBC,GAerB,IAZA,IAAMC,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAIAvB,EAAI,EAAGA,EAAIuB,EAAMR,OAAQf,IAAK,CAAC,IAAD,cACnBuB,EAAMvB,GADa,GAC9BwB,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAErC,GAAIJ,EAAGE,IAAMF,EAAGE,KAAOF,EAAGG,IAAMH,EAAGE,KAAOF,EAAGI,GAC3C,OAAOJ,EAAGE,GAGd,OAAO,KAzDYG,CAAgBP,EAAQX,aAWvC,OANIU,EADDE,EACU,YAAcA,EAEd,iBAAwBpB,KAAKM,MAAMK,OAAS,IAAM,KAK3D,yBAAKjB,UAAU,QACX,yBAAKA,UAAU,cACf,kBAACI,EAAD,CACIG,IAAQkB,EAAQX,YAChBZ,SAAa,SAACG,GAAD,OAAO,EAAK4B,YAAY5B,OAGzC,yBAAKL,UAAU,aACf,iCAAQwB,EAAR,KACA,mC,GAvDGf,IAAMC,WAgEzBwB,IAASC,OACL,kBAACxB,EAAD,MACAyB,SAASC,eAAe,W","file":"static/js/main.ec4f3a01.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'\n\n\nfunction Square(props) {\n    return (\n        <button className=\"square\" onClick={ props.onClick2 }>\n            { props.value2 } \n        </button>\n    );\n}\n  \nclass Board extends React.Component {\n\n    renderSquare(i) {\n        return (\n            <Square \n                value2 = {this.props.arr[i]} \n                onClick2 = { () => this.props.onClick2(i) }\n            />\n        );\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"board-row\">\n                {this.renderSquare(0)}\n                {this.renderSquare(1)}\n                {this.renderSquare(2)}\n                </div>\n                <div className=\"board-row\">\n                {this.renderSquare(3)}\n                {this.renderSquare(4)}\n                {this.renderSquare(5)}\n                </div>\n                <div className=\"board-row\">\n                {this.renderSquare(6)}\n                {this.renderSquare(7)}\n                {this.renderSquare(8)}\n                </div>\n            </div>\n        );\n    }\n}\n  \nclass Game extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            history: [{\n                arrFromGame: Array(9).fill(null),\n            }],\n            isNext: true,\n        }\n    }\n\n\n    handleClick(mi) {\n\n        const history = this.state.history;\n        const current = history[history.length - 1];\n        const carr = current.arrFromGame.slice();\n\n        carr[mi] = this.state.isNext ? 'X' : 'O';\n\n        this.setState({ \n            history: history.concat([{\n                arrFromGame: carr,\n            }]),\n            isNext: !this.state.isNext,\n        });\n    }\n\n\n    render() {\n\n        const history = this.state.history;\n        const current = this.state.history[history.length - 1];\n        const winner = calculateWinner(current.arrFromGame);\n\n        let status;\n\n        if(winner) {\n            status = \"Wygrywa: \" + winner;\n        } else {\n            status = 'Next player: ' + '' + (this.state.isNext ? 'X' : 'O');    \n        }\n\n\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                <Board \n                    arr = { current.arrFromGame }\n                    onClick2 = { (i) => this.handleClick(i) }\n                 />\n                </div>\n                <div className=\"game-info\">\n                <div> { status } </div>\n                <ol>{/* TODO */}</ol>\n                </div>\n            </div>\n        );\n    }\n}\n  \n// ========================================\n  \nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n\n\nfunction calculateWinner(sq) {\n\n\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n\n\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      if (sq[a] && sq[a] === sq[b] && sq[a] === sq[c]) {\n        return sq[a];\n      }\n    }\n    return null;\n}\n  "],"sourceRoot":""}